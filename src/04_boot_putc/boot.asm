;boot()
ORG     0x7c00                                          ;

Entry:
        jmp     IPL                                     ; IPLラベルへ移動
BPB:
        BOOT_LOAD       equ         0x7c00              ; BOOT_LOAD=0x7c00

        nop                                             ;
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; BPB( BIOS Parameter Block )
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

        timES  90 - ( $ - $$ ) db 0x90                  ; BPB領域を確保
IPL:
        cli                                             ; 割り込み禁止

        mov     ax , 0x0000                             ; AX=0x0000
        mov     ds , ax                                 ; DS=0x0000
        mov     es , ax                                 ; ES=0x0000
        mov     ss , ax                                 ; SS=0x0000
        mov     sp , BOOT_LOAD                          ; SP=0x7c00

        sti                                             ; 割り込み許可

        mov     [BOOT.DRIVE] , dl                       ;

        mov     ah , 0x0E                               ; 文字を表示
        mov     bx , 0x0000                             ;
        mov     al , 'A'                                ;
        int     0x10                                    ;

        jmp     $                                       ; 処理の終了

        align       2       , db 0                      ;
BOOT:
        .DRIVE:
            dw      0x0000                              ;


        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        ; IPL( Initial Program Loader )
        ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        times 510 - ($ - $$) db 0x00                    ; IPL領域を浸す
        db      0x55 , 0xAA                             ; 0x55 0xAA


;(関数の概要(ブートプログラムです))
; 1. ORGディレクティブ命令でプログラムのロードアドレス指定を行います
; 2. BPBはOSが活用するデータの集合領域ですので早速IPL（初期化プログラム）へ移動します
; 3. 後にspに書き込む値(0x7c00)をBPB領域にequで定数として書き込んでおきました
; 4. かっこいいのでnop書いておきました
; 5. 今回はBPB領域を90バイトとし90バイト目までtimes疑似操作で0x90つまりnopで浸します(BPB
;    領域を実行してもシステムを暴走させないため)
; 6. 後にレジスタの設定や割り込み込みの設定も施すのでそのときに割り込みをされてしまうと困るので
;    cliでIFフラグを0にします
; 7. セグメントレジスタへの転送では即値を指定しないでレジスタを介して各セグメントレジスタに値を
;    書き込みます、AXに0を書き込んだらDS,ES,SSにAXレジスタの値を転送します、スタック領域は
;    ブートプログラムの真上に配置したいので先ほど設定したBOOT_LOAD (0x7x00)を付随します
; 8. 一通り設定を施したのでstiでIFフラグを1にします
; 9. BIOSがDLレジスタにドライブ番号を書き込んでくれるのでその値をメモリに保存しておきます
; 10. テレタイプ一文字出力は、AHに0x0E , ALに文字コード , BHにページ番号 , BLに文字色(ビデ
;     オモード時のみ) です、ページ番号でいくつかのデータを固有に作れるらしい、
; 11. jmp -2 を繰り返して繰り返しを施します
; 11. 次に値を保存するための領域を作るので、アライメントを2バイトで合わせます,nopで浸しときます
; 12. 新たなグローバルラベルの中にローカルラベルで値を保存するための領域(さっきのDLレジスタの値
;    をほぞんするための領域)を2バイト空けておきます
; 13. ブートプログラムは５１２バイトに収めることをしたいので一先ず５１０バイト目まで0で浸します
; 14. 最後にブートフラグ、0x55と0xAAを書き込んでブートプログラムの完成です
