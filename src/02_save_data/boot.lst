     1                                  ;boot()
     2                                  ORG     0x7c00                                          ;
     3                                  
     4                                  Entry:
     5 00000000 EB58                            jmp     IPL                                     ; IPLラベルへ移動
     6                                  BPB:
     7                                          BOOT_LOAD       equ         0x7c00              ; BOOT_LOAD=0x7c00
     8                                  
     9 00000002 90                              nop                                             ;
    10                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                                          ; BPB( BIOS Parameter Block )
    12                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    13                                  
    14 00000003 90<rept>                        timES  90 - ( $ - $$ ) db 0x90                  ; BPB領域を確保
    15                                  IPL:
    16 0000005A FA                              cli                                             ; 割り込み禁止
    17                                  
    18 0000005B B80000                          mov     ax , 0x0000                             ; AX=0x0000
    19 0000005E 8ED8                            mov     ds , ax                                 ; DS=0x0000
    20 00000060 8EC0                            mov     es , ax                                 ; ES=0x0000
    21 00000062 8ED0                            mov     ss , ax                                 ; SS=0x0000
    22 00000064 BC007C                          mov     sp , BOOT_LOAD                          ; SP=0x7c00
    23                                  
    24 00000067 FB                              sti                                             ; 割り込み許可
    25                                  
    26 00000068 8816[6E00]                      mov     [BOOT.DRIVE] , dl                       ;
    27                                  
    28                                  
    29 0000006C EBFE                            jmp     $                                       ; 処理の終了
    30                                  
    31                                          align       2       , db 0                      ;
    32                                  BOOT:
    33                                          .DRIVE:
    34 0000006E 0000                                dw      0x0000                              ;
    35                                  
    36                                  
    37                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    38                                          ; IPL( Initial Program Loader )
    39                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    40 00000070 00<rept>                        times 510 - ($ - $$) db 0x00                    ; IPL領域を浸す
    41 000001FE 55AA                            db      0x55 , 0xAA                      ;       ; 0x55 0xAA
    42                                  
    43                                  
    44                                  ;(関数の概要(ブートプログラムです))
    45                                  ; x. ORGディレクティブ命令でプログラムのロードアドレス指定を行います
    46                                  ; 1. BPBはOSが活用するデータの集合領域ですので早速IPL（初期化プログラム）へ移動します
    47                                  ; 2. 後にspに書き込む値(0x7c00)をBPB領域にequで定数として書き込んでおきました
    48                                  ; 3. かっこいいのでnop書いておきました
    49                                  ; 4. 今回はBPB領域を90バイトとし90バイト目までtimes疑似操作で0x90つまりnopで浸します(BPB
    50                                  ;    領域を実行してもシステムを暴走させないため)
    51                                  ; 5. 後にレジスタの設定や割り込み込みの設定も施すのでそのときに割り込みをされてしまうと困るので
    52                                  ;    cliでIFフラグを0にします
    53                                  ; 6. セグメントレジスタへの転送では即値を指定しないでレジスタを介して各セグメントレジスタに値を
    54                                  ;    書き込みます、AXに0を書き込んだらDS,ES,SSにAXレジスタの値を転送します、スタック領域は
    55                                  ;    ブートプログラムの真上に配置したいので先ほど設定したBOOT_LOAD (0x7x00)を付随します
    56                                  ; 7. 一通り設定を施したのでstiでIFフラグを1にします
    57                                  ; x. BIOSがDLレジスタにドライブ番号を書き込んでくれるのでその値をメモリに保存しておきます
    58                                  ; x. jmp -2 を繰り返して繰り返しを施します
    59                                  ; x. 次に値を保存するための領域を作るので、アライメントを2バイトで合わせます,nopで浸しときます
    60                                  ; x. 新たなグローバルラベルの中にローカルラベルで値を保存するための領域(さっきのDLレジスタの値
    61                                  ;    をほぞんするための領域)を2バイト空けておきます
    62                                  ; 8. ブートプログラムは５１２バイトに収めることをしたいので一先ず５１０バイト目まで0で浸します
    63                                  ; 9. 最後にブートフラグ、0x55と0xAAを書き込んでブートプログラムの完成です
    64                                  
    65                                  ;(ちょっとメモメモ公録)
    66                                  ;    31行目でBOOT:で新たなグローバルラベルを作っているけど何なんだろうと考えてみた
    67                                  ;    まず Messege: db 'GoodNight!'っていうコードが書かれていたとして注意したいのは高級言語
    68                                  ;    でのMessege="GoodNight" とは本質が異なるってこと、じゃあなんなのかっていうとMessegeに
    69                                  ;    文字コードとしての"GoodNight"を代入しているのではなくて、新たなラベルをつけてデータ領域
    70                                  ;    の場所(アドレス)をはっきりさせようってこと、そもそも jmp func1 というコードが書かれてい
    71                                  ;　  るとしてその意味は”一番目の関数に移動して”ってことでアドレスを指すのfunc1っていう役割だ
    72                                  ;    func1: ...... って関数が存在したとして
    73                                  ;    その考えをもとにMessege: db 'GoodNight' を読み解くと グローバルラベルに文字コードが書
    74                                  ;    かれてるじゃん！ってなる、つまりソースコード内で利用できるMessegeという言葉はデータの開始
    75                                  ;    アドレスを示してるじゃん！ってなる、だからデータを保存しておきたいときはラベルをうまく活用
    76                                  ;    するようにするってことが大事
    77                                  ;    ORGはアドレス計算を0x7c00からやってねってアセンブラに教える
    78                                  ;    （こっからは自分なりの憶測）
    79                                  ;    さっき書いたソースコードには一応IPL領域というくくりの中にBOOTというラベルをつけてアドレス
    80                                  ;    を指し示そうって感じ、でもその中にローカルラベルDRIVEが書かれている、なんでかというとソー
    81                                  ;    スにBOOT_LOAD equ 0x7c00 と書かれている、スタックセグメントレジスタに設定するための値
    82                                  ;    を保存するためだ、もちろんBOOT: dw 0x0000 って書いても mov [BOOT] , dl とすればOKK
    83                                  ;    だと思う、そしたらBOOT_LOADとBOOTができる、でもBOOTって何？って感じで直感的に支える、BO
    84                                  ;    OT_LOADとBOOT_DRIVEならしっくりくる、だからローカルラベルを利用してBOOT.DRIVEでドライ
    85                                  ;    ブ番号を指すことにしょうってことだと思う
