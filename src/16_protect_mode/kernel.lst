     1                                  ;kernel()
     2                                  %include    "/home/m8ku/prog/src/include/define.asm"
     1                              <1> ;define()
     2                              <1>         BOOT_LOAD       equ     (0x7C00)                 ; ブートプログラムロード位置
     3                              <1> 
     4                              <1>         BOOT_SIZE       equ     (1024 * 8)               ; ブートコードサイズ
     5                              <1>         SECT_SIZE       equ     (512)                    ; セクタサイズ 512B
     6                              <1>         BOOT_SECT       equ     (BOOT_SIZE / SECT_SIZE)  ; ブートプログラムのセクタ数
     7                              <1>         E820_RECORD_SIZE    equ 20                       ; メモリ情報の格納サイズ20B
     8                              <1>         KERNEL_LOAD     equ     0x0010_1000              ; カーネルのロード位置
     9                              <1>         KERNEL_SIZE     equ     (1024 * 8)               ; カーネルのサイズ
    10                              <1>         BOOT_END        equ     (BOOT_LOAD + BOOT_SIZE)  ; ブートコードの最終アドレス
    11                              <1>         KERNEL_SECT     equ     (KERNEL_SIZE / SECT_SIZE); カーネルのセクタ数
    12                              <1> 
    13                              <1> ; (定義の概要)
    14                              <1> ; 0. それぞれdefineしています、ソースコードにうまく取り込もう
     3                                  %include    "/home/m8ku/prog/src/include/macro.asm"
     1                              <1> ;cdecl(),drive()
     2                              <1> %macro  cdecl   1-*.nolist
     3                              <1> 
     4                              <1>     %rep %0 - 1
     5                              <1> 
     6                              <1>         push    %{-1 : -1}
     7                              <1>         %rotate -1
     8                              <1> 
     9                              <1>     %endrep
    10                              <1> 
    11                              <1>     %rotate -1
    12                              <1>     call    %1
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1> 
    16                              <1>         add     sp , (__BITS__>>3) * (%0 - 1)
    17                              <1> 
    18                              <1>     %endif
    19                              <1> 
    20                              <1> %endmacro
    21                              <1> ;(マクロの概要(関数呼び出しのための関数です))
    22                              <1> ; 1.cdeclとしてマクロを定義して、引数は１からの可変長として、リスト出力の抑止を指定する(.lst)
    23                              <1> ; 2.%repから、もらった引数から関数分を差し引いた %0 - 1 回として %endrep まで繰り返します
    24                              <1> ; 3.関数呼び出しに備えるために引数をスタックに積んでいきます、%{-1 : -1 }はもらった引数全体の
    25                              <1> ;   終端を表しています ですので、受け取った引数が putc , ax , bx だとして一回目のループでbx
    26                              <1> ;   がスタックに積ます、次の%rotateは引数を回転します例えば (1,2,3)が(3,1,2)になります今回
    27                              <1> ;   は右に回転させたいので-1と指定していますが左に回転させたい場合は+を指定してやります、そして
    28                              <1> ;   (bx,putc,ax)になり次のループで引数の終端axが積んでから引数を回転(ax,bx,putc)となります
    29                              <1> ;   そして今回の例だとここで繰り返しが終了します
    30                              <1> ; 3.今回の例の続きで引数を回転させて(putc,ax,bx)となって
    31                              <1> ; 4.第一引数の名前の関数を呼び出します、今回の例では第一引数はputcとなっているのでputcという関
    32                              <1> ;   数が呼び出されることとなります
    33                              <1> ; 5.後に関数に引数として積んだスタックを調整してやるのですがマクロに引数を一つもしてしていないの
    34                              <1> ;   にもかかわらずスタックポインタを調節されては困るから条件式に当てはまったら処理をするようにし
    35                              <1> ;   てあげます今回だと一つ以上の引数が指定されたらです
    36                              <1> ; 6.関数を呼び出したら呼び出し側がスタックを調節してやらなければいけないのでスタックを調節します
    37                              <1> ;   スタックポインタレジスタに,(__BITS__>>3)*(%0 - 1 )を計算して書き込みます、__BITS__の
    38                              <1> ;   意味はNASMに元々組み込まれているマクロで16bit,32bit,64bitの判定を行います、16bitのプロ
    39                              <1> ;   グラムだったとして16を左へ3回シフトして(>>のところ)2が得られます32だったら4、64だったら8
    40                              <1> ;   、そしてCPUアーキテクチャ単位でスタックの料理ができるようになります、(%0 - 1)で引数の数を
    41                              <1> ;   だして、さきほどだした2と今回出した2をかけて4,積んだ引数は2つなのでビンゴです、spに4を加算
    42                              <1> ;   して関数呼び出しのすべての処理が終わりました
    43                              <1> ; 7.条件処理を終えます
    44                              <1> ; 8.マクロの終了です
    45                              <1> 
    46                              <1> struc drive
    47 00000000 <res 00000002>      <1>         .no     resw    1                               ; ドライブ番号
    48 00000002 <res 00000002>      <1>         .cyln   resw    1                               ; シリンダ
    49 00000004 <res 00000002>      <1>         .head   resw    1                               ; ヘッド
    50 00000006 <res 00000002>      <1>         .sect   resw    1                               ; セクタ
    51                              <1> 
    52                              <1> endstruc
    53                              <1> ;(マクロの概要(構造体の定義をしています))
    54                              <1> ; 0. ディスクアクセスに必要な情報をソースコードに更新する形で利用します、
    55                              <1> ;    次に更新する例を示します
    56                              <1> ;   istruc drive
    57                              <1> ;       at .sect dw 2                                   ; S:セクタ
    58                              <1> ;   iend
     4                                  
     5                                      ORG         KERNEL_LOAD                             ; 0010_1000番地始まりだぞ
     6                                  [BITS 32]
     7                                  ;--------------------------------------------------------
     8                                  ; エントリポイント
     9                                  ;--------------------------------------------------------
    10                                  kernel:
    11 00000000 EBFE                            jmp     $                                       ; ∞
    12                                  
    13 00000002 00<rept>                    times   (KERNEL_SIZE - ($ - $$))    db  0x00        ; 8kバイトでアセンブル
