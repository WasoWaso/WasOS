     1                                  ;boot()
     2                                          BOOT_LOAD       equ         0x7c00              ; BOOT_LOAD=0x7c00
     3                                          ORG     0x7c00                                  ;
     4                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     5                                  ; マクロ
     6                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     7                                          %include "/home/m8ku/prog/src/include/macro.asm"
     1                              <1> ;cdecl()
     2                              <1> %macro  cdecl   1-*.nolist
     3                              <1> 
     4                              <1>     %rep %0 - 1
     5                              <1> 
     6                              <1>         push    %{-1 : -1}
     7                              <1>         %rotate -1
     8                              <1> 
     9                              <1>     %endrep
    10                              <1> 
    11                              <1>     %rotate -1
    12                              <1>     call    %1
    13                              <1> 
    14                              <1>     %if 1 < %0
    15                              <1> 
    16                              <1>         add     sp , (__BITS__>>3) * (%0 - 1)
    17                              <1> 
    18                              <1>     %endif
    19                              <1> 
    20                              <1> %endmacro
    21                              <1> 
    22                              <1> ;(マクロの概要(関数呼び出しのための関数です))
    23                              <1> ; 1.cdeclとしてマクロを定義して、引数は１からの可変長として、リスト出力の抑止を指定する(.lst)
    24                              <1> ; 2.%repから、もらった引数から関数分を差し引いた %0 - 1 回として %endrep まで繰り返します
    25                              <1> ; 3.関数呼び出しに備えるために引数をスタックに積んでいきます、%{-1 : -1 }はもらった引数全体の
    26                              <1> ;   終端を表しています ですので、受け取った引数が putc , ax , bx だとして一回目のループでbx
    27                              <1> ;   がスタックに積ます、次の%rotateは引数を回転します例えば (1,2,3)が(3,1,2)になります今回
    28                              <1> ;   は右に回転させたいので-1と指定していますが左に回転させたい場合は+を指定してやります、そして
    29                              <1> ;   (bx,putc,ax)になり次のループで引数の終端axが積んでから引数を回転(ax,bx,putc)となります
    30                              <1> ;   そして今回の例だとここで繰り返しが終了します
    31                              <1> ; 3.今回の例の続きで引数を回転させて(putc,ax,bx)となって
    32                              <1> ; 4.第一引数の名前の関数を呼び出します、今回の例では第一引数はputcとなっているのでputcという関
    33                              <1> ;   数が呼び出されることとなります
    34                              <1> ; 5.後に関数に引数として積んだスタックを調整してやるのですがマクロに引数を一つもしてしていないの
    35                              <1> ;   にもかかわらずスタックポインタを調節されては困るから条件式に当てはまったら処理をするようにし
    36                              <1> ;   てあげます今回だと一つ以上の引数が指定されたらです
    37                              <1> ; 6.関数を呼び出したら呼び出し側がスタックを調節してやらなければいけないのでスタックを調節します
    38                              <1> ;   スタックポインタレジスタに,(__BITS__>>3)*(%0 - 1 )を計算して書き込みます、__BITS__の
    39                              <1> ;   意味はNASMに元々組み込まれているマクロで16bit,32bit,64bitの判定を行います、16bitのプロ
    40                              <1> ;   グラムだったとして16を左へ3回シフトして(>>のところ)2が得られます32だったら4、64だったら8
    41                              <1> ;   、そしてCPUアーキテクチャ単位でスタックの料理ができるようになります、(%0 - 1)で引数の数を
    42                              <1> ;   だして、さきほどだした2と今回出した2をかけて4,積んだ引数は2つなのでビンゴです、spに4を加算
    43                              <1> ;   して関数呼び出しのすべての処理が終わりました
    44                              <1> ; 7.条件処理を終えます
    45                              <1> ; 8.マクロの終了です
     8                                  
     9                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    10                                  ; エントリポイント
    11                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    12                                  entry:
    13 00000000 EB58                            jmp     IPL                                     ; IPLラベルへ移動
    14                                  BPB:
    15                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    16                                          ; BPB( BIOS Parameter Block )
    17                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    18                                  
    19 00000002 90<rept>                        times  90 - ( $ - $$ ) db 0x90                  ; BPB領域を確保
    20                                  IPL:
    21                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    22                                          ; IPL( Initial Program Loader )
    23                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    24 0000005A FA                              cli                                             ; 割り込み禁止
    25                                  
    26 0000005B B80000                          mov     ax , 0x0000                             ; AX=0x0000
    27 0000005E 8ED8                            mov     ds , ax                                 ; DS=0x0000
    28 00000060 8EC0                            mov     es , ax                                 ; ES=0x0000
    29 00000062 8ED0                            mov     ss , ax                                 ; SS=0x0000
    30 00000064 BC007C                          mov     sp , BOOT_LOAD                          ; SP=0x7c00
    31                                  
    32 00000067 FB                              sti                                             ; 割り込み許可
    33                                  
    34 00000068 8816[AE00]                      mov     [BOOT.DRIVE] , dl                       ;
    35                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    36                                          ; 文字列を表示
    37                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    38 0000006C 68[9600]E83E0083C4-             cdecl   puts , .s0                              ; puts(.s0);
    38 00000074 02                 
    39                                  
    40                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                                          ; 数値を表示
    42                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    43 00000075 BE630F                          mov     si , 3939                               ;
    44                                  
    45 00000078 6A016A0A6A0868-                 cdecl itoa,  si , .s1 , 8 , 10 , 0b0001         ; "    3939"
    45 0000007F [A300]56E84C0083C4-
    45 00000087 0A                 
    46 00000088 68[A300]E8220083C4-             cdecl puts, .s1                                 ;
    46 00000090 02                 
    47                                  
    48                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    49                                          ; 再起動
    50                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    51 00000091 E8BF00                          cdecl reboot                                    ; //戻ってこない
    52                                  
    53                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    54                                          ; 処理の終了
    55                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    56 00000094 EBFE                            jmp     $                                       ; 繰り返し
    57                                  
    58                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    59                                          ; データ
    60                                          ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    61 00000096 426F6F74696E672E2E-     .s0     db  "Booting..." , 0x0A , 0x0D , 0              ;
    61 0000009F 2E0A0D00           
    62 000000A3 2D2D2D2D2D2D2D2D0A-     .s1     db  "--------"   , 0x0A , 0x0D , 0              ;
    62 000000AC 0D00               
    63                                  
    64                                          align       2       , db 0                      ;
    65                                  BOOT:
    66                                          .DRIVE:
    67 000000AE 0000                                dw      0x0000                              ; ドライブ番号
    68                                  
    69                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    70                                      %include "/home/m8ku/prog/src/modules/real/puts.asm"
     1                              <1> ;puts(str)
     2                              <1> puts:
     3 000000B0 55                  <1>         push    bp                                      ; スタックフレームを構築
     4 000000B1 89E5                <1>         mov     bp , sp                                 ;
     5                              <1> 
     6 000000B3 50                  <1>         push    ax                                      ; 各レジスタの退避
     7 000000B4 53                  <1>         push    bx                                      ;
     8 000000B5 56                  <1>         push    si                                      ;
     9 000000B6 9C                  <1>         pushf                                           ;
    10                              <1> 
    11 000000B7 8B7604              <1>         mov     si , [bp + 4]                           ; 第一引数へアクセス
    12 000000BA B40E                <1>         mov     ah , 0x0E                               ; AH=0x0E
    13 000000BC BB0000              <1>         mov     bx , 0x0000                             ; BX=0x0000
    14 000000BF FC                  <1>         cld                                             ; DF=0
    15                              <1> 
    16                              <1> .10L:                                                   ; do{
    17 000000C0 AC                  <1>         lodsb                                           ; AL = *SI++;
    18                              <1> 
    19 000000C1 3C00                <1>         cmp     al , 0                                  ; if(0 == AL)
    20 000000C3 7404                <1>         je      .10E                                    ; break;
    21                              <1> 
    22 000000C5 CD10                <1>         int     0x10                                    ; Int10(0x0E,AL)//文字出力
    23                              <1> 
    24 000000C7 EBF7                <1>         jmp     .10L                                    ; while (1);
    25                              <1> .10E:
    26                              <1> 
    27 000000C9 9D                  <1>         popf                                            ; 各レジスタの復帰
    28 000000CA 5E                  <1>         pop     si                                      ;
    29 000000CB 5B                  <1>         pop     bx                                      ;
    30 000000CC 58                  <1>         pop     ax                                      ;
    31                              <1> 
    32 000000CD 89EC                <1>         mov     sp , bp                                 ; スタックフレームの破棄
    33 000000CF 5D                  <1>         pop     bp                                      ;
    34                              <1> 
    35 000000D0 C3                  <1>         ret                                             ; もとの処へ
    36                              <1> 
    37                              <1> ;(関数の概要(文字列を表示する関数です))
    38                              <1> ; 1. スタックフレームを構築します
    39                              <1> ; 2. 各レジスタを退避します
    40                              <1> ; 3. SIレジスタには後ほど利用する値を、AHレジスタに0x0EをBXレジスタには0をBIOSコールに備えて
    41                              <1> ;    書き込んでおきます
    42                              <1> ; 3. ストリング命令に備えてDFフラグを０を書き込みます
    43                              <1> ; 4. 先に引数の転送元をSIレジスタに書き込んだので転送元(メモリ)から転送先(ALレジスタ)へ値をを
    44                              <1> ;    転送します、この時にDIレジスタの値がインクリメントされます、
    45                              <1> ; 5. もしALレジスタに0が入ったら関数の終了アドレスへ移動します
    46                              <1> ; 6. そしたらALレジスタにはきっとASCII文字が書かれているので0x10番でBIOSコールをし表示します
    47                              <1> ; 7. .10Eのアドレスへ移動してALレジスタに0が入るまで文字を表示して結果的に文字列が表示できます
    48                              <1> ; 8. 各レジスタ復帰します
    49                              <1> ; 9. スッタックフレームを取り除いて
    50                              <1> ;10. 呼び出し元のアドレスまで移動します
    71                                      %include "/home/m8ku/prog/src/modules/real/itoa.asm"
     1                              <1> ;itoa(num,buff,size,radix,flags) //B0,値を符号付か  B1,+-付加するか B2,0で空白埋めるか
     2                              <1> itoa:
     3                              <1> ;                                                       ;    +12| フラグ
     4                              <1> ;                                                       ;    +10| 基数
     5                              <1> ;                                                       ;    + 8| バッファサイズ
     6                              <1> ;                                                       ;    + 6| バッファアドレス
     7                              <1> ;                                                       ;    + 4| 数値
     8                              <1> ;                                                       ;    + 2| IP(元の値)
     9 000000D1 55                  <1>         push    bp                                      ; BP + 0| BP(元の値)
    10 000000D2 89E5                <1>         mov     bp , sp                                 ; ------+--------
    11                              <1> 
    12 000000D4 50                  <1>         push    ax                                      ; //各レジスタの保存
    13 000000D5 53                  <1>         push    bx                                      ;
    14 000000D6 51                  <1>         push    cx                                      ;
    15 000000D7 52                  <1>         push    dx                                      ;
    16 000000D8 56                  <1>         push    si                                      ;
    17 000000D9 57                  <1>         push    di                                      ;
    18 000000DA 9C                  <1>         pushf                                           ;
    19                              <1> 
    20 000000DB 8B4604              <1>         mov     ax , [bp + 4]                           ; // 第一引数へアクセス
    21 000000DE 8B7606              <1>         mov     si , [bp + 6]                           ; // 第二引数へアクセス
    22 000000E1 8B4E08              <1>         mov     cx , [bp + 8]                           ; // 第三引数へアクセス
    23                              <1> 
    24 000000E4 89F7                <1>         mov     di , si                                 ; // バッファの終端
    25 000000E6 01CF                <1>         add     di , cx                                 ; //dst = &dst-[size-1]
    26 000000E8 4F                  <1>         dec     di                                      ; //buffを超えないようdec
    27                              <1> 
    28 000000E9 8B5E0C              <1>         mov     bx , [bp + 12]                          ; //第五引数へアクセス
    29                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    30                              <1> ; 符号付き判定
    31                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    32 000000EC F7C30100            <1>         test    bx , 0b0001                             ; if(flags & 0x01)//判定
    33 000000F0 7408                <1> .10Q:   je      .10E                                    ; {
    34 000000F2 83F800              <1>         cmp     ax , 0                                  ;   if(val < 0)
    35 000000F5 7D03                <1> .12Q:   jge     .10E                                    ;   {
    36 000000F7 83CB02              <1>         or      bx , 0b0010                             ;     flags |= 2; //表示
    37                              <1> .12E:                                                   ;   }
    38                              <1> .10E:                                                   ; }
    39                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    40                              <1> ; 符号出力判定
    41                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    42 000000FA F7C30200            <1>         test    bx , 0b0010                             ; if(flags & 0x02)出力判定
    43 000000FE 7410                <1> .20Q:   je      .20E                                    ; {
    44 00000100 83F800              <1>         cmp     ax , 0                                  ;   if(val < 0)
    45 00000103 7D07                <1> .22Q:   jge     .22F                                    ;   {
    46 00000105 F7D8                <1>         neg     ax                                      ;   val *= -1;//符号反転
    47 00000107 C6042D              <1>         mov     [si] , byte '-'                         ;   *dst = '-';//符号表示
    48 0000010A EB03                <1>         jmp     .22E                                    ;   }
    49                              <1> .22F:                                                   ;   else{
    50 0000010C C6042B              <1>         mov     [si] , byte '+'                         ;   　*dst = '+';//符号表示
    51                              <1> .22E:                                                   ;   }
    52 0000010F 49                  <1>         dec     cx                                      ;   size --;//バッファ減算
    53                              <1> .20E:                                                   ; }
    54                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    55                              <1> ; ASCII変換
    56                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    57 00000110 8B5E0A              <1>         mov     bx , [bp+10]                            ; //第四引数へアクセス
    58                              <1> .30L:                                                   ; do
    59                              <1> ;                                                       ; {
    60 00000113 BA0000              <1>         mov     dx , 0                                  ;　
    61 00000116 F7F3                <1>         div     bx                                      ; AX=DX:AX / BX(基数);
    62                              <1> ;                                                       ; DX=DX:AX % BX(基数);
    63                              <1> ;                                                       ;
    64 00000118 89D6                <1>         mov     si , dx                                 ; // テーブル参照
    65 0000011A 8A94[4301]          <1>         mov     dl , byte [.ascii + si]                 ; DL=ASCII[DX];
    66                              <1> 
    67 0000011E 8815                <1>         mov     [di] , dl                               ; dst* = DL;
    68 00000120 4F                  <1>         dec     di                                      ; dst--    ;
    69                              <1> 
    70 00000121 83F800              <1>         cmp     ax , 0                                  ;
    71 00000124 E0ED                <1>         loopnz .30L                                     ; } while (AX);
    72                              <1> .30E:
    73                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    74                              <1> ; 空白を埋める
    75                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    76 00000126 83F900              <1> .40Q:   cmp     cx , 0                                  ; if(size)
    77 00000129 740D                <1>         je      .40E                                    ; {
    78 0000012B B020                <1>         mov     al , ' '                                ; AL = ' ';//' 'で埋める
    79 0000012D 837E0C04            <1>         cmp     [bp + 12] , word 0b0100                 ;  if(flags & 0x04)
    80 00000131 7502                <1> .42Q:   jne     .42E                                    ;  {
    81 00000133 B030                <1>         mov     al , '0'                                ;  AL = '0';//'0'で埋める
    82                              <1> .42E:                                                   ;  }
    83 00000135 FD                  <1>         std                                             ; //DF = 1//(-方向)
    84 00000136 F3AA                <1>         rep     stosb                                   ; while(--CX) *DI--=' ';
    85                              <1> .40E:                                                   ; }
    86                              <1> 
    87 00000138 9D                  <1>     popf                                                ; //各レジスタの復帰
    88 00000139 5F                  <1>     pop     di                                          ;
    89 0000013A 5E                  <1>     pop     si                                          ;
    90 0000013B 5A                  <1>     pop     dx                                          ;
    91 0000013C 59                  <1>     pop     cx                                          ;
    92 0000013D 5B                  <1>     pop     bx                                          ;
    93 0000013E 58                  <1>     pop     ax                                          ;
    94                              <1> 
    95 0000013F 89EC                <1>     mov     sp , bp                                     ; //スタックフレームの破棄
    96 00000141 5D                  <1>     pop     bp                                          ;
    97                              <1> 
    98 00000142 C3                  <1>     ret                                                 ; //もとのとこへ
    99                              <1> 
   100 00000143 303132333435363738- <1> .ascii: db      "0123456789ABCDEF"                      ; 変換テーブル
   100 0000014C 39414243444546      <1>
   101                              <1> 
   102                              <1> ;(関数の概要(数値を文字列に変換する関数です))
   103                              <1> ; 1. スタックフレームを構築します
   104                              <1> ; 2. 各レジスタを保存します
   105                              <1> ; 3. 各引数へアクセスすると共に後に利用する値を練ります、この関数は右詰めに文字コードを保存して
   106                              <1> ;    いき左側を空白などで埋めます、そのためにバッファアドレスからバッファサイズを足して右端へア
   107                              <1> ;    ドレスを設定します、しかしこのままだと指定されたサイズを超えて一文字目を保存してしまいます
   108                              <1> ;    もし保存先バッファアドレスが0x3000保存先バッファサイズが3Byteだったとして下の図で考えて
   109                              <1> ;    いくと3000+3で3003になってバッファを超えた∇へアクセスしてオーバーフローが起きてしまうので
   110                              <1> ;    作った数値からデクリメントしてあげます     ↓
   111                              <1> ;    __________ __________ __________ __________
   112                              <1> ;   | 3000番地 || 3001番地 || 3002番地 ||3003番地 |
   113                              <1> ;    ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^ ^^^^^^^^^^
   114                              <1> ; (符号付き判定)
   115                              <1> ; 1. 引数として受け取る値の中にビット定義のフラグが含まれていますフォーマットはB0が"値を符号付
   116                              <1> ;    き変数として扱う"B1が"'+/-'記号を付加する"B2が"空白を'0'で埋める"です、そしてこれらの前
   117                              <1> ;    準備をこちらでします、ビット定義のフラグの引数はbxレジスタへ転送してあります
   118                              <1> ; 2. 'test bx,0b0001'ではフラグのB0を検査し符号付き整数として扱うかどうかを判断します、test
   119                              <1> ;    命令はdstとsrcのAND演算を行い結果に応じてZF(ゼロフラグ)を設定します'test 0b01,0b01'だ
   120                              <1> ;    ったらZFは1,"test 0b01,0b00"だったらZFは0が設定されます、そして"je .10E"で分岐をしま
   121                              <1> ;    す、jeはZFを検査して0だったらそのまま続いて1だったらオペランドのアドレスへジャンプします、
   122                              <1> ;    次'cmp ax,0'で比較して'jge .10E'で条件分岐を行いますjgeは符号付き条件分岐命令ですので
   123                              <1> ;    負の数値でも条件分岐ができます、もしaxが0より小さかったらbxレジスタを0b0010でor演算しB1
   124                              <1> ;    を設定します
   125                              <1> ; (符号出力判定)
   126                              <1> ; 1. test命令でB1を検査しB1が立っていたら後へ続きます、次'cmp ax,0'で比較して'jge .22F'
   127                              <1> ;    で条件分岐を行いますjgeは符号付き条件分岐命令ですので負の数値でも条件分岐ができます、もし
   128                              <1> ;    axが0より小さかったら'-'符号をもしaxが0より大きいなら'+'符号を付加します、もし負の数だっ
   129                              <1> ; 　 たとしては負の数値のままだと後のASCII変換で期待した値を取得できないのでneg命令で二の補数反
   130                              <1> ; 　 転をして符号を反転します、そしてバッファを一つ利用したので残りバッファ数を保持しているcxレジ
   131                              <1> ;    スタをデクリメントします
   132                              <1> ; (ASCII変換)
   133                              <1> ; 1. 基数を取得して後続のプログラムへ備えます
   134                              <1> ; 2. 数値を文字列に変換する系統です、どうやって変換するかというと、数値を基数で除算し数値が0とな
   135                              <1> ; 　 るまで繰り返します、基数が2なら2進数の値、奇数が10なら10進数の値といった具合で文字列が得ら
   136                              <1> ;    れます、そのとき除算の余りを元に文字列を組み立てていくのですが、ある数値を除算して得られた
   137                              <1> ;    余りの数を変換テーブルへの索引として文字変換しLOOPNZ命令により残りバッファサイズ(cx)と変
   138                              <1> ;    換する値(ax)がが0になるまで繰り返します加えてその時必要となる文字列変換テーブルをソースコ
   139                              <1> ;    ードの一番最後、関数の最後付近に定義しています
   140                              <1> ; 3. 'mov dx,0'でdxレジスタに0を転送していますがこれは繰り返し行う過程で除算による余りがdxレ
   141                              <1> ;    ジスタに転送されるのですがx86CPUの除算では"AX=DX:AX/オペランド"という具合に被演算子にdx
   142                              <1> ;    レジスタが含まれているので繰り返しの過程でdxレジスタを初期化してやります
   143                              <1> ; 4. 'div bx'でaxレジスタの値をbxレジスタの値(基数)で除算します、このとき余りはdxレジスタへ商
   144                              <1> ;     はaxレジスタへそれぞれ格納されます、得られた商をまた次の繰り返しで除算します
   145                              <1> ; 5. 'mov si,dx'で先程の除算で得られた余剰をsiレジスタへ転送します、
   146                              <1> ; 6. 'mov dl,byte [.ascii+si]'で得られた余剰から文字コードを取得します、余剰をインデックス
   147                              <1> ;    として[.axcii+si]といった具合で変換テーブルへアクセスして得られるASCII文字をdlレジスタ
   148                              <1> ;    へ書き込みます
   149                              <1> ; 7. 'mov [di],dl'として先程得た文字コードを転送先アドレスを保持するdiレジスタをメモリオペラ
   150                              <1> ;    ンドにしてメモリへ文字コードを転送します
   151                              <1> ; 8. 'dec di'で次に保存する値へ備えてアドレスをデクリメントして保存位置を左へ一つずらします
   152                              <1> ; 9. 'cmp ax,0'で比較をして次のloopnzへ備えます
   153                              <1> ;10. 'loopnz .30L'では繰り返しを続けるかの有無を判断します、loopnzはCX=0,ZF=0の時オペランド
   154                              <1> ;    で指定したオフセットへジャンプします、ですのでバッファを使い切るか数値が0になるまで除算した
   155                              <1> ;    なら文字変換の繰り返しは終了します、先のことを言い換えてloopnzの終了条件はCX=0,ZF=1とな
   156                              <1> ;    ります加えてloopzの終了条件はCX=0,ZF=0、また1/2をすると0になります、
   157                              <1> ;11. そして3から10を繰り返したならば文字列が出来上がります
   158                              <1> ; (空白を埋める);
   159                              <1> ; 1. 'cmp cx,0'で比較をして条件分岐に備えます
   160                              <1> ; 2. 'je .40E'で残りのバッファがなかったらそのまま関数の終了へ移動します
   161                              <1> ; 3. 'cmp [bp+12,word 0b0100]'と'jne .42E'でもしビット定義のフラグ,B3が立っていたら'0'で
   162                              <1> ;     残りバッファを埋めて立っていなかったら空白で埋める条件分岐をJump If not equal(ZF=0)で
   163                              <1> ;     します
   164                              <1> ; 4. 'std'と'rep stosb'で残りのバッファを埋めます、stdでDFフラグをセットして後続のストリング
   165                              <1> ;    命令へ備えます、stosbはalレジスタの内容をdiレジスタのメモリアドレスを一バイトずつ転送する
   166                              <1> ;    と共にDFフラグが1ならdiレジスタをインクリメントし0だったらデクリメントへすることでアドレス
   167                              <1> ;    の増減をサポートする命令でrepはcxレジスタの値が0だったら転送を止めるプレフィックスで、そう
   168                              <1> ;    して残りのバッファ分を埋めることができるようになります
   169                              <1> 
   170                              <1> ; 4. スタックを復帰して
   171                              <1> ; 5. スタックフレームを取り外して
   172                              <1> ; 6. 'ret'で前にいた番地へ戻ります
    72                                      %include "/home/m8ku/prog/src/modules/real/reboot.asm"
     1                              <1> ;reboot()
     2                              <1> reboot:
     3                              <1>         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     4                              <1>         ; メッセージを表示
     5                              <1>         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     6 00000153 68[6F01]E857FF83C4- <1>         cdecl   puts, .s0                               ; //再起動メッセージを表示
     6 0000015B 02                  <1>
     7                              <1> 
     8                              <1>         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
     9                              <1>         ; キー入力待ち
    10                              <1>         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                              <1> .10L:
    12                              <1> ;                                                       ; do
    13 0000015C B410                <1>         mov     ah , 0x10                               ; {
    14 0000015E CD16                <1>         int     0x16                                    ;   // キー入力待ち
    15                              <1> ;                                                       ;   AL=BIOS(0x16,0x10);
    16 00000160 3C20                <1>         cmp     al , ' '                                ;   ZF = AL == ' ';
    17 00000162 75F8                <1>         jne     .10L                                    ; } while(!ZF)
    18                              <1> 
    19                              <1>         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    20                              <1>         ; 改行を出力
    21                              <1>         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    22 00000164 68[8D01]E846FF83C4- <1>         cdecl   puts, .s1                               ; //改行
    22 0000016C 02                  <1>
    23                              <1> 
    24                              <1>         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    25                              <1>         ; 再起動
    26                              <1>         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    27 0000016D CD19                <1>         int     0x19                                    ; BIOS(0x19); //reboot()
    28                              <1> 
    29                              <1>         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    30                              <1>         ; 文字列データ
    31                              <1>         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    32 0000016F 0A0D50757368205350- <1> .s0 db 0x0A, 0x0D, "Push SPACE Key to Reboot...", 0     ;
    32 00000178 414345204B65792074- <1>
    32 00000181 6F205265626F6F742E- <1>
    32 0000018A 2E2E00              <1>
    33 0000018D 0A0D0A0D00          <1> .s1 db 0x0A, 0x0D, 0x0A, 0x0D, 0                        ;
    34                              <1> 
    35                              <1> ; (関数の概要(コンピューターを再起動する関数です))
    36                              <1> ; 1. "cdecl puts,.s0" 突然再起動されたらビックリするので再起動をする旨を伝えます
    37                              <1> ; 2. "10L" もしスペースキーが押下されたら再起動ができるように繰り返しを行います"mov ah,0x10"
    38                              <1> ;    は拡張キーボード用です
    39                              <1> ;   | int 0x16 | |      AH      | |      AL      |
    40                              <1> ;   |^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    41                              <1> ;   |    入力   | |     0x00     |       ---      |
    42                              <1> ;   |    出力   | | スキャンコード |   アスキーコード  |
    43                              <1> ; 3. "cdecl puts,.s1" 改行を出力します
    44                              <1> ; 4. "int 0x19" 再起動をするBIOSコールを発行します
    45                              <1> ; 5. ".s0" ".s1" 表示する文字列をそれぞれ定義しています
    73                                  
    74 00000192 00<rept>                        times 510 - ($ - $$) db 0x00                    ; IPL領域を浸す
    75 000001FE 55AA                            db      0x55 , 0xAA                             ; 0x55 0xAA
    76                                  
    77                                  
    78                                  ; 関数の概要(はじめに実行されるブートプログラムです)
    79                                  ; 数値を表示できるようにitoa関数の作成と利用をしました
    80                                  ; cdecl itoa, 数値 , バッファアドレス , バッファサイズ , 基数 , フラグ ; という書式です
    81                                  ; あとは文字列出力関数のputsでテレタイプ式文字表示をします
